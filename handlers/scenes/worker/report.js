const { Markup } = require("telegraf");
const WizardScene = require("telegraf/scenes/wizard");

module.exports = new WizardScene(
  "report",
  async (ctx) => {
    try {
      const msg = await ctx
        .editMessageText(`<b>‚úçÔ∏è –û–ø–∏—à–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É...</b>`, {
          parse_mode: "HTML",
          reply_markup: Markup.inlineKeyboard([
            [Markup.callbackButton("< –û—Ç–º–µ–Ω–∞", "cancel")],
          ]),
        })
        .catch((err) => err);
      ctx.wizard.state.msgId = msg.message_id;
      return ctx.wizard.next();
    } catch (err) {
      console.log(err);
      try {
        await ctx.answerCbQuery(
          "ü§ñ –í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!",
          true
        );
      } catch (err) {
        await ctx.replyWithHTML(
          "ü§ñ –í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!"
        );
      }
      return ctx.scene.leave();
    }
  },
  async (ctx) => {
    try {
      await ctx.deleteMessage().catch((err) => err);
      await ctx.deleteMessage(ctx.wizard.state.msgId).catch((err) => err);

      await ctx.telegram.sendMessage(
        ctx.state.settings.requestChatId,
        `‚ö†Ô∏è <b>–ù–æ–≤–∞—è –∂–∞–ª–æ–±–∞!
        
‚úçÔ∏è –û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã:</b> <code>${ctx.message.text}</code>`,
        {
          parse_mode: "HTML",
          reply_markup: Markup.inlineKeyboard([
            [
              Markup.callbackButton(
                "ü§∑üèº‚Äç‚ôÇÔ∏è –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
                `user_ban_${ctx.from.id}`
              ),
            ],
          ]),
        }
      );

      await ctx
        .replyWithHTML(
          "<b>‚úçÔ∏è –ó–∞–ø—Ä–æ—Å –±—ã–ª —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–¥–∞–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏. –û–∂–∏–¥–∞–π—Ç–µ, –ø–æ–∫–∞ –µ–≥–æ —Ä–∞—Å—Å–º–æ—Ç—Ä—è—Ç.</b>",
          {
            parse_mode: "HTML",
            reply_markup: Markup.inlineKeyboard([
              [Markup.callbackButton("< –ù–∞–∑–∞–¥", "menu")],
            ]),
          }
        )
        .catch((err) => err);

      return ctx.scene.leave();
    } catch (err) {
      console.log(err);
      try {
        await ctx.answerCbQuery(
          "ü§ñ –í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!",
          true
        );
      } catch (err) {
        await ctx.replyWithHTML(
          "ü§ñ –í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!"
        );
      }
      return ctx.scene.leave();
    }
  }
);