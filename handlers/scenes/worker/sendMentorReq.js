const { Markup } = require("telegraf");
const WizardScene = require("telegraf/scenes/wizard");

const { Mentors } = require("../../../database/index");

module.exports = new WizardScene(
  "sendMentorReq",
  async (ctx) => {
    try {
      const mentor = await Mentors.findOne({
        where: {
          workerId: ctx.from.id,
        },
      });

      if (!mentor) {
        const msg = await ctx
          .editMessageText(
            `<b>üßë‚Äçüè´ –í–≤–µ–¥–∏—Ç–µ –∫—Ä–∞—Ç–∫—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ–±–µ.
üí¨ P.S:</b> –ü–æ —ç—Ç–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è –±—É–¥–µ—Ç —Å—É–¥–∏—Ç—å - –±—Ä–∞—Ç—å –≤–∞—Å –≤ –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–∏ –∏–ª–∏ –Ω–µ—Ç.`,
            {
              parse_mode: "HTML",
              reply_markup: Markup.inlineKeyboard([
                [Markup.callbackButton("< –û—Ç–º–µ–Ω–∞", "cancel")],
              ]),
            }
          )
          .catch((err) => err);
        ctx.wizard.state.msgId = msg.message_id;
        return ctx.wizard.next();
      } else if (mentor.status == true) {
        await ctx.editMessageText("‚ö†Ô∏è <b>–¢—ã —É–∂–µ –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫!</b>", {
          parse_mode: "HTML",
          reply_markup: Markup.inlineKeyboard([
            [Markup.callbackButton("< –ù–∞–∑–∞–¥", "mentors")],
          ]),
        });
        return ctx.scene.leave();
      } else if (mentor.status == false) {
        await ctx.editMessageText(
          "‚ö†Ô∏è <b>–¢–≤–æ—è –∑–∞—è–≤–∫–∞ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ...</b>",
          {
            parse_mode: "HTML",
            reply_markup: Markup.inlineKeyboard([
              [Markup.callbackButton("< –ù–∞–∑–∞–¥", "mentors")],
            ]),
          }
        );
        return ctx.scene.leave();
      }
    } catch (err) {
      console.log(err);
      try {
        await ctx.answerCbQuery(
          "ü§ñ –í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!",
          true
        );
      } catch (err) {
        await ctx.replyWithHTML(
          "ü§ñ –í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!"
        );
      }
      return ctx.scene.leave();
    }
  },
  async (ctx) => {
    try {
      await ctx.deleteMessage().catch((err) => err);
      await ctx.deleteMessage(ctx.wizard.state.msgId).catch((err) => err);

      const mentor = await Mentors.create({
        workerId: ctx.from.id,
        username: ctx.from.username,
        about: ctx.message.text,
        percent: ctx.state.settings.mentorPercent
      });

      await ctx.telegram.sendMessage(
        ctx.state.settings.requestChatId,
        `üßë‚Äçüè´ –ó–∞—è–≤–∫–∞ –Ω–∞ –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–∞
        
<b>üíÅüèº‚Äç‚ôÇÔ∏è –ü–æ–¥–∞–ª: @${ctx.from.username} |</b> <code>${ctx.from.id}</code>

<b>üí¨ –û –Ω–µ–º:</b> <b>${ctx.message.text}</b>`,
        {
          parse_mode: "HTML",
          reply_markup: Markup.inlineKeyboard([
            [
              Markup.callbackButton("‚úÖ –ü—Ä–∏–Ω—è—Ç—å", `mentor_accept_${mentor.id}`),
              Markup.callbackButton(
                "‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å",
                `mentor_decline_${mentor.id}`
              ),
            ],
            [
              Markup.callbackButton(
                "ü§∑üèº‚Äç‚ôÇÔ∏è –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å",
                `user_ban_${ctx.from.id}`
              ),
            ],
          ]),
        }
      );

      await ctx
        .replyWithHTML(
          "<b>‚ö°Ô∏è –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –±—ã–ª–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞, –æ–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞!</b>",
          {
            parse_mode: "HTML",
            reply_markup: Markup.inlineKeyboard([
              [Markup.callbackButton("< –ù–∞–∑–∞–¥", "mentors")],
            ]),
          }
        )
        .catch((err) => err);

      return ctx.scene.leave();
    } catch (err) {
      console.log(err);
      try {
        await ctx.answerCbQuery(
          "ü§ñ –í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!",
          true
        );
      } catch (err) {
        await ctx.replyWithHTML(
          "ü§ñ –í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!"
        );
      }
      return ctx.scene.leave();
    }
  }
);