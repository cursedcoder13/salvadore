const WizardScene = require("telegraf/scenes/wizard");
const { Markup } = require("telegraf");
const axios = require("axios");
const HttpsProxyAgent = require("https-proxy-agent");

const { Domains } = require("../../../../database/index");

const httpsAgent = new HttpsProxyAgent({
  host: "45.145.88.15",
  port: "62272",
  auth: "jzQFZrqq:RyAgLpTf",
});

module.exports = new WizardScene(
  "addDomain",
  async (ctx) => {
    try {
      const msg = await ctx
        .editMessageText(
          `‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ –¥–æ–º–µ–Ω, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏

–ü—Ä–∏–º–µ—Ä—ã –¥–æ–º–µ–Ω–æ–≤: de-classsifelds.shop / de-onlineclasssifelds.xyz / eu-onlinestore.com`,
          {
            parse_mode: "HTML",
            reply_markup: Markup.inlineKeyboard([
              [Markup.callbackButton("< –û—Ç–º–µ–Ω–∞", "cancel")],
            ]),
          }
        )
        .catch((err) => err);

      ctx.wizard.state.msgId = msg.message_id;

      return ctx.wizard.next();
    } catch (err) {
      console.log(err);
      await ctx
        .reply("ü§ñ –í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!")
        .catch((err) => err);
      return ctx.scene.leave();
    }
  },
  async (ctx) => {
    try {
      await ctx.deleteMessage().catch((err) => err);
      await ctx.deleteMessage(ctx.wizard.state.msgId).catch((err) => err);

      ctx.wizard.state.domain = ctx.message.text;

      const domainCount = await Domains.count({
        where: {
          domain: ctx.message.text,
        },
      });

      if (domainCount > 0) {
        await ctx
          .reply("‚ùå –¢–∞–∫–æ–π –¥–æ–º–µ–Ω —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–æ—Ç–∞!", {
            parse_mode: "HTML",
            reply_markup: Markup.inlineKeyboard([
              [Markup.callbackButton("< –ù–∞–∑–∞–¥", "admin_domains")],
            ]),
          })
          .catch((err) => err);
        return ctx.scene.leave();
      }

      const msg = await ctx
        .reply(`‚è≥ –ü—Ä–æ–≤–µ—Ä—è—é —Å–≤–æ–±–æ–¥–µ–Ω –ª–∏ –¥–æ–º–µ–Ω...`, {
          parse_mode: "HTML",
        })
        .catch((err) => err);

      ctx.wizard.state.msgId = msg.message_id;

      await axios
        .post(
          `https://api.reg.ru/api/regru2/domain/check?input_data={"domains":[{"dname":"${ctx.message.text}"}]}&input_format=json&password=test&username=test`,
          {
            httpsAgent: httpsAgent,
          }
        )
        .then(async function (res) {
          if (res.data.answer.domains[0].result == "Available") {
            await ctx.deleteMessage(ctx.wizard.state.msgId).catch((err) => err);

            const msg = await ctx
              .reply(`‚è≥ –î–æ–º–µ–Ω —Å–≤–æ–±–æ–¥–µ–Ω, —É–∑–Ω–∞—é —Ü–µ–Ω—É...`, {
                parse_mode: "HTML",
              })
              .catch((err) => err);

            ctx.wizard.state.msgId = msg.message_id;

            await axios
              .get(
                `https://api.reg.ru/api/regru2/domain/get_prices?output_content_type=plain&password=${ctx.state.settings.regPass}&username=${ctx.state.settings.regLogin}`,
                {
                  httpsAgent: httpsAgent,
                }
              )
              .then(async function (res) {
                ctx.wizard.state.price =
                  res.data.answer.prices[
                    ctx.message.text.split(".")[1]
                  ].reg_price;

                await ctx
                  .deleteMessage(ctx.wizard.state.msgId)
                  .catch((err) => err);

                await ctx
                  .reply(
                    `üí∞ <b>–°—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ–º–µ–Ω–∞:</b> ${
                      res.data.answer.prices[ctx.message.text.split(".")[1]]
                        .reg_price
                    } ‚ÇΩ
                    
üîó <b>–î–æ–º–µ–Ω:</b> ${ctx.message.text} (${ctx.message.text.split(".")[1]})`,
                    {
                      parse_mode: "HTML",
                      reply_markup: Markup.inlineKeyboard([
                        [
                          Markup.callbackButton("–ö—É–ø–∏—Ç—å", "buy"),
                          Markup.callbackButton("–û—Ç–º–µ–Ω–∏—Ç—å", "cancel"),
                        ],
                      ]),
                    }
                  )
                  .catch((err) => err);

                return ctx.wizard.next();
              });
          } else {
            await ctx
              .reply(`‚ùå –î–æ–º–µ–Ω –∑–∞–Ω—è—Ç, –ø–æ–ø—Ä–æ–±—É–π –¥—Ä—É–≥–æ–π...`, {
                parse_mode: "HTML",
                reply_markup: Markup.inlineKeyboard([
                  [Markup.callbackButton("< –ù–∞–∑–∞–¥", "admin_domains")],
                ]),
              })
              .catch((err) => err);

            return ctx.scene.leave();
          }
        });
    } catch (err) {
      console.log(err);
      await ctx
        .reply("ü§ñ –í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!")
        .catch((err) => err);
      return ctx.scene.leave();
    }
  },
  async (ctx) => {
    try {
      if (ctx.update.callback_query.data == "buy") {
        await axios
          .get(
            `https://api.reg.ru/api/regru2/user/get_balance?currency=RUR&output_content_type=plain&password=${ctx.state.settings.regPass}&username=${ctx.state.settings.regLogin}`,
            {
              httpsAgent: httpsAgent,
            }
          )
          .then(async function (res) {
            ctx.wizard.state.balance = res.data.answer.prepay;

            if (
              parseInt(res.data.answer.prepay) >=
              parseInt(ctx.wizard.state.price)
            ) {
              const msg = await ctx
                .editMessageText(`‚è≥ –û—Ç–ø—Ä–∞–≤–∏–ª –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–∫—É–ø–∫—É –¥–æ–º–µ–Ω–∞...`, {
                  parse_mode: "HTML",
                })
                .catch((err) => err);

              ctx.wizard.state.msgId = msg.message_id;

              await axios
                .get(
                  `https://api.reg.ru/api/regru2/domain/create?input_data={"contacts":{"country":"RU","a_addr":"Bolshoy sobachiy, 33","a_city":"Moscow","a_company":"Luntik, LLC","a_country_code":"RU","a_email":"${ctx.state.settings.regLogin}","a_first_name":"Ivan","a_last_name":"Ivanov","a_phone":"+79817655676","a_postcode":"101000","a_state":"Moscow","b_addr":"asdfasdfasdf asdfas asdf","b_city":"Moscow","b_company":"Luntik, LLC","b_country_code":"RU","b_first_name":"Ivan","b_last_name":"Ivanov","b_phone":"+79817655676","b_postcode":"101000","b_state":"Moscow","o_addr":"ssdfdsf sdfdsf","o_city":"Moscow","o_company":"Luntik, LLC","o_country_code":"RU","o_email":"${ctx.state.settings.regLogin}","o_phone":"+79817655676","o_postcode":"101000","o_state":"Moscow","t_addr":"sdfgsdfg sdfg","t_city":"Moscow","t_company":"Luntic OOC","t_country_code":"RU","t_email":"sdfsdaf@gmail.com","t_first_name":"Ivan","t_last_name":"Ivanov","t_phone":"+79817655676","t_postcode":"101000","t_state":"Moscow","country":"RU","country":"RU","country":"RU","country":"RU","country":"RU","country":"RU","country":"RU","country":"RU","country":"RU","country":"RU","country":"RU","b_email":"${ctx.state.settings.regLogin}","e_mail":"${ctx.state.settings.regLogin}","person_r_surname":"–†—é—Ä–∏–∫","person_r_name":"–°–≤—è—Ç–æ—Å–ª–∞–≤","person_r_patronimic":"–í–ª–∞–¥–∏–º–∏—Ä–æ–≤–∏—á","phone":"+79817655676","birth_date":"31.12.1999","descr":"Demo Site","person":"Ivanov Ivan Ivanovich","p_addr_zip":"101000","p_addr_area":"–õ–µ–Ω–∏–Ω–∞ 12","p_addr_city":"–≥. –ú–æ—Å–∫–≤–∞","p_addr_addr":"—É–ª. –ö–Ω—è–∂–µ—Å–∫–∞, –¥.1","p_addr_recipient":"–†—é—Ä–∏–∫—É –°–≤—è—Ç–æ—Å–ª–∞–≤—É –í–ª–∞–¥–∏–º–∏—Ä–æ–≤–∏—á—É","passport_number":"22 44 668800","passport_place":"–≤—ã–¥–∞–Ω –ø–æ –º–µ—Å—Ç—É –ø—Ä–∞–≤–ª–µ–Ω–∏—è","passport_date":"23.12.2020"},"domains":[{"dname":"${ctx.wizard.state.domain}","srv_certificate":"free","srv_parking":"free"}],"nss":{"ns0":"ns1.reg.ru","ns1":"ns2.reg.ru"}}&input_format=json&output_content_type=plain&password=${ctx.state.settings.regPass}&username=${ctx.state.settings.regLogin}`,
                  {
                    httpsAgent: httpsAgent,
                  }
                )
                .then(async function (res) {
                  if (res.data.answer.pay_type == "nonexistent") {
                    await ctx
                      .deleteMessage(ctx.wizard.state.msgId)
                      .catch((err) => err);

                    await ctx
                      .reply(
                        `‚ùå –ù–∞ –±–∞–ª–∞–Ω—Å–µ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤!

‚ôªÔ∏è <b>–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å:</b> ${ctx.wizard.state.balance} ‚ÇΩ
üí∞ <b>–°—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ–º–µ–Ω–∞:</b> ${ctx.wizard.state.price} ‚ÇΩ`,
                        {
                          parse_mode: "HTML",
                          reply_markup: Markup.inlineKeyboard([
                            [Markup.callbackButton("< –ù–∞–∑–∞–¥", "admin_domains")],
                          ]),
                        }
                      )
                      .catch((err) => err);
                  } else if (
                    res.data.answer.pay_notes == "Amount successfully charged"
                  ) {
                    await ctx
                      .deleteMessage(ctx.wizard.state.msgId)
                      .catch((err) => err);

                    await Domains.create({
                      domain: ctx.wizard.state.domain,
                    });
                    await ctx
                      .reply(
                        `‚úÖ –î–æ–º–µ–Ω —É—Å–ø–µ—à–Ω–æ –∫—É–ø–ª–µ–Ω!
                      
‚ÑπÔ∏è –î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.`,
                        {
                          parse_mode: "HTML",
                          reply_markup: Markup.inlineKeyboard([
                            [
                              Markup.callbackButton(
                                "‚öôÔ∏è –î–æ–º–µ–Ω—ã",
                                "admin_allDomains"
                              ),
                            ],
                            [Markup.callbackButton("< –ù–∞–∑–∞–¥", "admin_domains")],
                          ]),
                        }
                      )
                      .catch((err) => err);
                  } else {
                    await ctx
                      .reply(
                        "ü§ñ –í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!"
                      )
                      .catch((err) => err);
                  }
                });
            } else {
              await ctx
                .reply(
                  `‚ùå –ù–∞ –±–∞–ª–∞–Ω—Å–µ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤!
        
‚ôªÔ∏è <b>–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å:</b> ${res.data.answer.prepay} ‚ÇΩ
üí∞ <b>–°—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ–º–µ–Ω–∞:</b> ${ctx.wizard.state.price} ‚ÇΩ`,
                  {
                    parse_mode: "HTML",
                    reply_markup: Markup.inlineKeyboard([
                      [Markup.callbackButton("< –ù–∞–∑–∞–¥", "admin_domains")],
                    ]),
                  }
                )
                .catch((err) => err);
            }
          });
      } else {
        await ctx
          .reply("ü§ñ –í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!")
          .catch((err) => err);
      }
      return ctx.scene.leave();
    } catch (err) {
      console.log(err);
      await ctx
        .reply("ü§ñ –í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!")
        .catch((err) => err);
      return ctx.scene.leave();
    }
  }
);