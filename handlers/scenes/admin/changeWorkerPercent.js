const WizardScene = require("telegraf/scenes/wizard");
const { Markup } = require("telegraf");

const { users } = require("../../../database/index");

module.exports = new WizardScene(
  "changeWorkerPercent",
  async (ctx) => {
    try {
      const msg = await ctx
        .editMessageText("‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –ø—Ä–æ—Ü–µ–Ω—Ç –¥–ª—è –≤–æ—Ä–∫–µ—Ä–∞", {
          parse_mode: "HTML",
          reply_markup: Markup.inlineKeyboard([
            [Markup.callbackButton("< –û—Ç–º–µ–Ω–∞", "cancel")],
          ]),
        })
        .catch((err) => err);

      ctx.wizard.state.msgId = msg.message_id;
      ctx.wizard.state.workerId = ctx.match[1];

      return ctx.wizard.next();
    } catch (err) {
      console.log(err);
      await ctx
        .reply("ü§ñ –í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!")
        .catch((err) => err);
      return ctx.scene.leave();
    }
  },
  async (ctx) => {
    try {
      await ctx.deleteMessage().catch((err) => err);
      await ctx.deleteMessage(ctx.wizard.state.msgId).catch((err) => err);

      if(isNaN(parseFloat(ctx.message.text))) {
        await ctx.replyWithHTML("‚ùå –í–≤–µ–¥–∏ —á–∏—Å–ª–æ", {
            reply_markup: Markup.inlineKeyboard([
                [Markup.callbackButton("< –ù–∞–∑–∞–¥", `admin_mentor_${ctx.wizard.state.mentorId}`)]
            ])
        })
        return ctx.scene.leave()
      }

      await users.update(
        {
          percent: ctx.message.text,
        },
        {
          where: {
            id: ctx.wizard.state.workerId,
          },
        }
      );

      await ctx
        .reply("üü¢ –ü—Ä–æ—Ü–µ–Ω—Ç –±—ã–ª —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω!", {
          parse_mode: "HTML",
          reply_markup: Markup.inlineKeyboard([
            [Markup.callbackButton("‚ôªÔ∏è –°–∫—Ä—ã—Ç—å", "hide")],
          ]),
        })
        .catch((err) => err);

      return ctx.scene.leave();
    } catch (err) {
      console.log(err);
      await ctx
        .reply("ü§ñ –í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!")
        .catch((err) => err);
      return ctx.scene.leave();
    }
  }
);