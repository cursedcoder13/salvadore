const { Markup } = require("telegraf");

const { users, Profits } = require("../../../../database/index");

module.exports = async (ctx) => {
  try {
    const username = ctx.match[1];
    const user = await users.findOne({ where: { username: username } });

    if (!user)
      return ctx.reply("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.", {
        reply_markup: Markup.inlineKeyboard([
          [Markup.callbackButton("‚ôªÔ∏è –°–∫—Ä—ã—Ç—å", "hide")],
        ]),
      });

    if (parseInt(user.profitSum) < 0) {
      await user.update({
        profitSum: 0,
      });
    }

    const profitsSum = parseFloat(
      await Profits.sum("eurAmount", {
        where: { workerId: user.id },
      })
    );

    await ctx.deleteMessage().catch((err) => err);

    await ctx
      .replyWithHTML(
        `<b>üóÇÔ∏è –¢–µ–∫—É—â–∏–π —Ä–∞–∑–¥–µ–ª:</b>
‚ï∞ üë®üèª‚Äçüíª –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–æ—Ä–∫–µ—Ä–æ–º

‚ï≠ ‚ñ´Ô∏è <b>Username:</b> <code>${ctx.from.first_name}</code>
‚îú ‚ñ´Ô∏è <b>User ID:</b> <code>${ctx.from.id}</code>
‚ï∞ ‚ñ´Ô∏è <b>Tag:</b> <code>#${ctx.state.user.tag}</code>

‚ï≠ üë§ <b>${
          user.admin == true
            ? "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä"
            : user.vbiver == true
            ? "–í–±–∏–≤–µ—Ä"
            : "–í–æ—Ä–∫–µ—Ä"
        }:</b> @${user.username}
‚îú üí∞ <b>–í—Å–µ–≥–æ –∑–∞—Ä–∞–±–æ—Ç–∞–ª:</b> ‚Ç¨ ${
          isNaN(profitsSum)
            ? "0"
            : ((profitsSum / 100) * user.percent).toFixed(2)
        }
‚îú üè¶ <b>–ö–æ—à–µ–ª–µ–∫ –¥–ª—è –≤—ã–ø–ª–∞—Ç—ã:</b> ${
          user.wallet == null
            ? "–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
            : `<code>${user.wallet.split("&")[1]}</code> (${
                user.wallet.split("&")[0]
              })`
        }
‚ï∞ #Ô∏è‚É£ <b>TAG:</b> <code>#${user.tag}</code>

‚îú ‚öñÔ∏è <b>–ü—Ä–æ—Ü–µ–Ω—Ç–Ω–∞—è —Å—Ç–∞–≤–∫–∞:</b> ${ctx.state.user.percent}%`,
        {
          parse_mode: "HTML",
          reply_markup: Markup.inlineKeyboard([
            [
              Markup.callbackButton(
                `${user.banned == true ? "üü¢ –†–∞–∑–±–∞–Ω–∏—Ç—å" : "üî¥ –ó–∞–±–∞–Ω–∏—Ç—å"}`,
                `user_${user.banned == true ? "unban" : "ban"}_${user.id}`
              ),
              Markup.callbackButton(
                "üõ† –ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å",
                `admin_userStatus_${user.id}`
              ),
            ],
            [
              Markup.callbackButton(
                "üí∞ –ü—Ä–æ—Ñ–∏—Ç—ã",
                `admin_profitsUser_${user.id}`
              ),
              Markup.callbackButton(
                "üîÅ –ò–∑–º–µ–Ω–∏—Ç—å –ø—Ä–æ—Ü–µ–Ω—Ç",
                `admin_changePercent_${user.id}`
              ),
            ],
            [Markup.callbackButton("‚ôªÔ∏è –°–∫—Ä—ã—Ç—å", "hide")],
          ]),
        }
      )
      .catch((err) => err);
  } catch (err) {
console.log(err);
    try {
      return ctx.answerCbQuery(
        "ü§ñ –í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!",
        true
      );
    } catch (err) {
      return ctx.replyWithHTML(
        "ü§ñ –í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!"
      );
    }
  }
};