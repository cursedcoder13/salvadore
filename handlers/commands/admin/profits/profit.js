const { Markup } = require("telegraf");

const {
  Profits,
  users,
  Mentors,
  items,
  services,
  countries,
} = require("../../../../database/index");

module.exports = async (ctx, page = 1) => {
  try {
    const profit = await Profits.findOne({
      where: {
        id: ctx.match[1],
      },
    });

    if (!profit)
      return ctx.answerCbQuery("ü§ñ –ü—Ä–æ—Ñ–∏—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", true).catch((err) => err);

    const worker = await users.findOne({
      where: {
        id: profit.workerId,
      },
    });

    const service = await services.findOne({
      where: {
        code: profit.serviceCode,
      },
    });

    const country = await countries.findOne({
      where: {
        code: service.country,
      },
    });

    let mentorPercent = 0;
    var mentorUsername = "";

    if (profit.mentorId != null) {
      const mentor = await Mentors.findOne({
        where: {
          workerId: profit.mentorId,
        },
      });

      mentorPercent = mentor.percent;
      mentorUsername = mentor.username;
    }

    return ctx
      .editMessageText(
        `<b>üóÇÔ∏è –¢–µ–∫—É—â–∏–π —Ä–∞–∑–¥–µ–ª:</b>
‚ï∞ ${profit.status == true ? "üí∞" : "üïì"} –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ -> –ü—Ä–æ—Ñ–∏—Ç—ã -> ${
          profit.status == true
            ? "–í—ã–ø–ª–∞—á–µ–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏—Ç—ã"
            : "–ù–µ –≤—ã–ø–ª–∞—á–µ–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏—Ç—ã"
        } -> #${profit.id}

‚ï≠ ‚ñ´Ô∏è <b>Username:</b> <code>${ctx.from.first_name}</code>
‚îú ‚ñ´Ô∏è <b>User ID:</b> <code>${ctx.from.id}</code>
‚ï∞ ‚ñ´Ô∏è <b>Tag:</b> <code>#${ctx.state.user.tag}</code>

‚îú ${profit.status == true ? "‚ôªÔ∏è" : "üïì"} <b>–°—Ç–∞—Ç—É—Å –ø—Ä–æ—Ñ–∏—Ç–∞:</b> ${
          profit.status == true ? "–í—ã–ø–ª–∞—á–µ–Ω–æ" : "–û–∂–∏–¥–∞–µ—Ç –≤—ã–ø–ª–∞—Ç—ã"
        }

‚ï≠ üí≥ <b>–°—É–º–º–∞ –ø—Ä–æ—Ñ–∏—Ç–∞:</b> ‚Ç¨ ${profit.eurAmount.toFixed(2)}
‚îú üí∂ <b>–î–æ–ª—è –≤–æ—Ä–∫–µ—Ä–∞:</b> ‚Ç¨ ${
          profit.mentorId == null
            ? (
                (parseInt(profit.eurAmount) / 100) *
                parseInt(worker.percent)
              ).toFixed(2)
            : (
                (parseInt(profit.eurAmount) / 100) * parseInt(worker.percent) -
                (parseInt(profit.eurAmount) / 100) * parseInt(mentorPercent)
              ).toFixed(2)
        }
‚ï∞ ${
          Array.from(country.title)[0] + Array.from(country.title)[1]
        } <b>–ü–ª–æ—â–∞–¥–∫–∞:</b> ${service.title.replace(/[^a-zA-Z]+/g, "")} ${
          service.status
        }.0

‚ï≠ üë®üèª‚Äçüíª <b>–í–æ—Ä–∫–µ—Ä:</b> #${worker.tag} <b>(@${worker.username})</b>
‚ï∞ üè¶ <b>–ö–æ—à–µ–ª–µ–∫ –¥–ª—è –≤—ã–ø–ª–∞—Ç—ã:</b> ${
          worker.wallet == null
            ? "–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
            : `<code>${worker.wallet.split("&")[1]}</code> (${
                worker.wallet.split("&")[0]
              })`
        }

${
  profit.mentorId != null
    ? `‚îú üß† <b>–ù–∞—Å—Ç–∞–≤–Ω–∏–∫:</b> @${mentorUsername} <b>(${mentorPercent}%)</b>`
    : ""
}`,
        {
          parse_mode: "HTML",
          disable_web_page_preview: true,
          reply_markup: Markup.inlineKeyboard([
            [
              Markup.callbackButton(
                "‚ôªÔ∏è –í—ã–ø–ª–∞—á–µ–Ω–æ",
                `admin_profit_${profit.id}_pay`
              ),
              Markup.callbackButton(
                "üïì –í –æ–∂–∏–¥–∞–Ω–∏–∏",
                `admin_profit_${profit.id}_wait`
              ),
            ],
            [
              Markup.callbackButton(
                "‚ùå –£–¥–∞–ª–∏—Ç—å",
                `admin_profit_${profit.id}_destroy`
              ),
            ],
            [
              Markup.callbackButton(
                "< –ù–∞–∑–∞–¥",
                `admin_profits_${profit.status == true ? "pay" : "notpay"}`
              ),
            ],
          ]),
        }
      )
      .catch((err) => err);
  } catch (err) {
    console.log(err);
  }
};